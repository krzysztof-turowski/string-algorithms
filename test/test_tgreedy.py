import unittest
import itertools
import os

from superstring import tgreedy
from exact_string_matching import forward
from generator import rand

def generate_random_words_set(l, m, A):
  S = set()
  for _ in range(m):
    t = rand.random_word(l, A)
    S.add(t)

  for w_1, w_2 in itertools.combinations(S, 2):
    gen = forward.knuth_morris_pratt(w_1,
                                     w_2,
                                     len(w_1) - 1,
                                     len(w_2) - 1)
    if next(gen, None) is not None:
      S.remove(w_2)
  return S

def check_if_superstring(S, super_string):
  for w in S:
    gen = forward.knuth_morris_pratt(super_string,
                                     w,
                                     len(super_string) - 1,
                                     len(w) - 1)
    if next(gen, None) is None:
      return (False, w)
  return (True, None)

class TestTGreedy(unittest.TestCase):
  run_large = unittest.skipUnless(
      os.environ.get('LARGE', False), 'Skip test in small runs')

  def test_overlap(self):
    self.assertEqual(tgreedy.overlap('#aba','#bab'), 2)
    self.assertEqual(tgreedy.overlap('#abab','#bab'), 3)
    self.assertEqual(tgreedy.overlap('#abb','#ab'), 0)
    self.assertEqual(tgreedy.overlap('#aa','#aa'), 1)
    self.assertEqual(tgreedy.overlap('#aab','#aab'), 0)
    self.assertEqual(tgreedy.overlap('#undergrounder', '#undergrounder'), 5)

  def test_empty(self):
    self.assertEqual(tgreedy.tgreedy([]), '')
    self.assertEqual(tgreedy.mgreedy([]), '')
    self.assertEqual(tgreedy.greedy([]), '')

  def test_small_random(self):
    S = generate_random_words_set(100, 10, ['a', 'b'])

    ALGORITHMS = [tgreedy.greedy, tgreedy.tgreedy, tgreedy.mgreedy]
    for algo in ALGORITHMS:
      is_superstring, w = check_if_superstring(S, algo(S))
      self.assertTrue(is_superstring,
                      'Superstring' + algo(S) + 'generated by '
                      + str(algo) + ' does not contain the word ' + str(w))

  @run_large
  def test_many_random_words(self):
    S = generate_random_words_set(10, 100, ['a', 'b', 'c', 'd'])

    ALGORITHMS = [tgreedy.greedy, tgreedy.tgreedy, tgreedy.mgreedy]
    for algo in ALGORITHMS:
      super_string = algo(S)
      is_superstring, w = check_if_superstring(S, super_string)
      self.assertTrue(is_superstring,
                      'Superstring' + super_string + 'generated by '
                      + str(algo) + ' does not contain the word ' + str(w))

  @run_large
  def test_approximation_ratio_for_random_small(self):
    A = ['a', 'b']
    S = generate_random_words_set(5, 10, A)
    ALGORITHMS = [(tgreedy.greedy, 4),
                  (tgreedy.tgreedy, 3),
                  (tgreedy.mgreedy, 4)]
    max_counter_example_length = int(max([len(algo(S))/ratio
                                          for algo, ratio in ALGORITHMS]))
    counter_example = None
    for length in range(max_counter_example_length):
      for candidate in itertools.product(A, repeat=length):
        candidate_string = True, ''.join(candidate)
        is_superstring, _ = check_if_superstring(S, candidate_string)
        if is_superstring:
          counter_example = candidate_string
          break
    if counter_example is None:
      return
    for algo, ratio in ALGORITHMS:
      super_string = algo(S)
      self.assertGreaterEqual(ratio * len(counter_example),
                              len(super_string),
                              'Superstring ' + counter_example +
                              ' contradicts approximation ratio for '
                              + str(algo))

  def test_example_1(self):
    S = ['#ate', '#half', '#lethal', '#alpha', '#alfalfa']
    super_string = tgreedy.tgreedy(S)

    for w in S:
      gen = forward.knuth_morris_pratt(super_string,
                                       w, len(super_string) - 1, len(w) - 1)
      self.assertNotEqual(None,
                          next(gen, None),
                          'Superstring does not contain the word ' + w)

  # example where greedy obtains better result
  def test_example_2(self):
    words = ['#cababab', '#ababababa', '#bababac']
    self.assertEqual(tgreedy.greedy(words), '#cababababac')
    # depending on how ties are broken (order in S) the resulting
    # string can be one of these two
    self.assertIn(tgreedy.tgreedy(words),
                  ['#cabababacababababa', '#ababababacabababac'])

  # example where tgreedy obtains better result
  def test_example_3(self):
    words = ['#cabb','#abbabba', '#bbdab']
    # depending on how ties are broken (order in S) the resulting
    # string can be one of these two
    self.assertIn(tgreedy.greedy(words), ['#cabbabbabbdab', '#bbdabcabbabba'])
    self.assertEqual(tgreedy.tgreedy(words), '#cabbdabbabba')
